[
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "recipes.models",
        "description": "recipes.models",
        "isExtraImport": true,
        "detail": "recipes.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "users.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "users.validators",
        "description": "users.validators",
        "detail": "users.validators",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ImageBase64Serializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class ImageBase64Serializer(serializers.ImageField):\n    \"\"\"Кодирование изображения в base64\"\"\"\n    def to_internal_value(self, data):\n        if isinstance(data, str) and data.startswith('data:image'):\n            format, imgstr = data.split(';base64,')\n            ext = format.split('/')[-1]\n            data = ContentFile(base64.b64decode(imgstr), name='photo.' + ext)\n        return super().to_internal_value(data)\nclass IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализатор для работы с ингредиентами\"\"\"",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализатор для работы с ингредиентами\"\"\"\n    class Meta:\n        model = Ingredient\n        fields = ('id', 'name', 'measurement_unit')\nclass AddIngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление ингредиентов\"\"\"\n    id = serializers.PrimaryKeyRelatedField(\n        queryset=Ingredient.objects.all(),\n        source='ingredient'",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "AddIngredientSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class AddIngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление ингредиентов\"\"\"\n    id = serializers.PrimaryKeyRelatedField(\n        queryset=Ingredient.objects.all(),\n        source='ingredient'\n    )\n    class Meta:\n        model = RecipeIngredient\n        fields = ('id', 'amount')\nclass RecipeIngredientSerializer(serializers.ModelSerializer):",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "RecipeIngredientSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class RecipeIngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Подробое описание ингредиентов в рецепте\"\"\"\n    id = serializers.PrimaryKeyRelatedField(\n        source='ingredient.id',\n        read_only=True\n    )\n    name = serializers.CharField(source='ingredient.name', read_only=True)\n    measurement_unit = serializers.CharField(\n        source='ingredient.measurement_unit',\n        read_only=True",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "RecipeCreateSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class RecipeCreateSerializer(serializers.ModelSerializer):\n    \"\"\"Создание рецепта. Проверяет игредиенты.\n    Ответ возвращает в GetRecipeSerializer\"\"\"\n    author = UsersShowInfoSerializer(read_only=True)\n    image = ImageBase64Serializer()\n    ingredients = AddIngredientSerializer(many=True)\n    class Meta:\n        model = Recipe\n        fields = ('id', 'tags', 'author', 'ingredients',\n                  'name', 'image', 'text', 'coocking_time')",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    \"\"\"Сериализатор для работы с тегами\"\"\"\n    class Meta:\n        model = Tag\n        fields = '__all__'\n        read_only_fields = ('__all__',)\nclass GetRecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Отображение полной информации о рецепте\"\"\"\nclass FavoriteSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление рецепта в/из избранного\"\"\"",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "GetRecipeSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class GetRecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Отображение полной информации о рецепте\"\"\"\nclass FavoriteSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление рецепта в/из избранного\"\"\"\n    class Meta:\n        model = Favorite\n        fields = ('user', 'recipe')\nclass ShoppingCartSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление ингредиентов из рецепта в список покупок\"\"\"\n    class Meta(FavoriteSerializer.Meta):",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "FavoriteSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class FavoriteSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление рецепта в/из избранного\"\"\"\n    class Meta:\n        model = Favorite\n        fields = ('user', 'recipe')\nclass ShoppingCartSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление ингредиентов из рецепта в список покупок\"\"\"\n    class Meta(FavoriteSerializer.Meta):\n        model = ShoppingCart\nclass RecipeShowInfoSerializer(serializers.ModelSerializer):",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "ShoppingCartSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class ShoppingCartSerializer(serializers.ModelSerializer):\n    \"\"\"Добавление/удаление ингредиентов из рецепта в список покупок\"\"\"\n    class Meta(FavoriteSerializer.Meta):\n        model = ShoppingCart\nclass RecipeShowInfoSerializer(serializers.ModelSerializer):\n    \"\"\"Отображение основной информации о рецепте\"\"\"\n    class Meta:\n        model = Recipe\n        fields = ('id', 'name', 'image', 'coocking_time')",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "RecipeShowInfoSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.recieps",
        "description": "backend.api.serializers.recieps",
        "peekOfCode": "class RecipeShowInfoSerializer(serializers.ModelSerializer):\n    \"\"\"Отображение основной информации о рецепте\"\"\"\n    class Meta:\n        model = Recipe\n        fields = ('id', 'name', 'image', 'coocking_time')",
        "detail": "backend.api.serializers.recieps",
        "documentation": {}
    },
    {
        "label": "UsersCreateSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.users",
        "description": "backend.api.serializers.users",
        "peekOfCode": "class UsersCreateSerializer(UserCreateSerializer):\n    \"\"\"Обработка запросов создания пользователя\"\"\"\n    class Meta:\n        model = User\n        fields = (\n            'id',\n            'username',\n            'email',\n            'first_name',\n            'last_name',",
        "detail": "backend.api.serializers.users",
        "documentation": {}
    },
    {
        "label": "UsersShowInfoSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.users",
        "description": "backend.api.serializers.users",
        "peekOfCode": "class UsersShowInfoSerializer(UserSerializer):\n    \"\"\"Вывод информации о пользователе\"\"\"\n    is_subscribed = SerializerMethodField(read_only=True)\n    class Meta:\n        model = User\n        fields = (\n            'id',\n            'username',\n            'email',\n            'first_name',",
        "detail": "backend.api.serializers.users",
        "documentation": {}
    },
    {
        "label": "FollowSerializer",
        "kind": 6,
        "importPath": "backend.api.serializers.users",
        "description": "backend.api.serializers.users",
        "peekOfCode": "class FollowSerializer(UsersShowInfoSerializer):\n    \"\"\"Добавление/удаление/просмотр подписок\"\"\"\n    recipes = SerializerMethodField(read_only=True)\n    recieps_count = SerializerMethodField(read_only=True)\n    class Meta(UsersShowInfoSerializer.Meta):\n        fields = UsersShowInfoSerializer.Meta.fields\n        + ('recieps', 'recieps_count')\n    def get_recieps(self, object):\n        request = self.context.get('request')\n        context = {'request': request}",
        "detail": "backend.api.serializers.users",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "backend.api.apps",
        "description": "backend.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "backend.api.apps",
        "documentation": {}
    },
    {
        "label": "get_list_allowed",
        "kind": 2,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "def get_list_allowed(allowed: str) -> list:\n    return [host.strip() for host in allowed.split(',') if host.strip()]\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = os.getenv('DEBUG', default=True)\nALLOWED_HOSTS = get_list_allowed(\n    os.getenv('ALLOWED_HOSTS', default='localhost')\n)\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = os.getenv('DEBUG', default=True)\nALLOWED_HOSTS = get_list_allowed(\n    os.getenv('ALLOWED_HOSTS', default='localhost')\n)\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = os.getenv('DEBUG', default=True)\nALLOWED_HOSTS = get_list_allowed(\n    os.getenv('ALLOWED_HOSTS', default='localhost')\n)\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG', default=True)\nALLOWED_HOSTS = get_list_allowed(\n    os.getenv('ALLOWED_HOSTS', default='localhost')\n)\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "ALLOWED_HOSTS = get_list_allowed(\n    os.getenv('ALLOWED_HOSTS', default='localhost')\n)\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_filters',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'foodgram.urls'",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "ROOT_URLCONF = 'foodgram.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "WSGI_APPLICATION = 'foodgram.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE', default='django.db.backends.postgresql'),\n        'NAME': os.getenv('DB_NAME', default='postgres'),\n        'USER': os.getenv('POSTGRES_USER', default='postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='postgres'),\n        'HOST': os.getenv('DB_HOST', default='db'),\n        'PORT': os.getenv('DB_PORT', default='5432')\n    }",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE', default='django.db.backends.postgresql'),\n        'NAME': os.getenv('DB_NAME', default='postgres'),\n        'USER': os.getenv('POSTGRES_USER', default='postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', default='postgres'),\n        'HOST': os.getenv('DB_HOST', default='db'),\n        'PORT': os.getenv('DB_PORT', default='5432')\n    }\n}",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 6,\n}",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'users.User'\nLANGUAGE_CODE = 'ru-ru'\nTIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\nLANGUAGE_CODE = 'ru-ru'\nTIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ru-ru'\nTIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "TIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "STATIC_URL = '/back_static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],\n        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly']",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'back_static/')\nMEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],\n        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly']\n    },",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "MEDIA_URL = '/back_media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],\n        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly']\n    },\n    \"SERIALIZERS\": {",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'back_media/')\nDJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],\n        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly']\n    },\n    \"SERIALIZERS\": {\n        \"user_create\": \"api.serializers.users.UsersCreateSerializer\",",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "DJOSER",
        "kind": 5,
        "importPath": "backend.foodgram.settings",
        "description": "backend.foodgram.settings",
        "peekOfCode": "DJOSER = {\n    'HIDE_USERS': False,\n    \"LOGIN_FIELD\": \"email\",\n    'PERMISSIONS': {\n        'user_list': ['rest_framework.permissions.AllowAny'],\n        'user': ['djoser.permissions.CurrentUserOrAdminOrReadOnly']\n    },\n    \"SERIALIZERS\": {\n        \"user_create\": \"api.serializers.users.UsersCreateSerializer\",\n        \"user\": \"api.serializers.users.UsersSerializer\",",
        "detail": "backend.foodgram.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.foodgram.urls",
        "description": "backend.foodgram.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n]",
        "detail": "backend.foodgram.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.foodgram.wsgi",
        "description": "backend.foodgram.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.foodgram.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "backend.recipes.management.commands.upload_data",
        "description": "backend.recipes.management.commands.upload_data",
        "peekOfCode": "class Command(BaseCommand):\n    def handle(self, *args, **options):\n        for model, file in MODELS_FILES.items():\n            with open(f'../data/{file}', encoding='utf-8') as table:\n                reader = csv.DictReader(table)\n                model.objects.bulk_create(model(**data) for data in reader)\n            self.stdout.write(self.style.SUCCESS(\n                f'=== {file} успешно загружен ===')\n            )\n        self.stdout.write(self.style.SUCCESS('=== Загрузка завершена ==='))",
        "detail": "backend.recipes.management.commands.upload_data",
        "documentation": {}
    },
    {
        "label": "MODELS_FILES",
        "kind": 5,
        "importPath": "backend.recipes.management.commands.upload_data",
        "description": "backend.recipes.management.commands.upload_data",
        "peekOfCode": "MODELS_FILES = {\n    Ingredient: 'ingredients.csv',\n}\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        for model, file in MODELS_FILES.items():\n            with open(f'../data/{file}', encoding='utf-8') as table:\n                reader = csv.DictReader(table)\n                model.objects.bulk_create(model(**data) for data in reader)\n            self.stdout.write(self.style.SUCCESS(",
        "detail": "backend.recipes.management.commands.upload_data",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.recipes.migrations.0001_initial",
        "description": "backend.recipes.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Favorite',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            ],",
        "detail": "backend.recipes.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.recipes.migrations.0002_auto_20230329_1338",
        "description": "backend.recipes.migrations.0002_auto_20230329_1338",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('recipes', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='shoppingcart',\n            name='user',",
        "detail": "backend.recipes.migrations.0002_auto_20230329_1338",
        "documentation": {}
    },
    {
        "label": "IngredientAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class IngredientAdmin(ModelAdmin):\n    list_display = ('name', 'measurement_unit')\n    search_fields = ('name',)\n@register(Tag)\nclass TagAdmin(ModelAdmin):\n    list_display = ('name', 'color', 'slug')\n@register(Recipe)\nclass RecipeAdmin(ModelAdmin):\n    list_display = ('name', 'author', 'pub_date', 'display_tags', 'favorite')\n    list_filter = ('name', 'author', 'tags')",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "TagAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class TagAdmin(ModelAdmin):\n    list_display = ('name', 'color', 'slug')\n@register(Recipe)\nclass RecipeAdmin(ModelAdmin):\n    list_display = ('name', 'author', 'pub_date', 'display_tags', 'favorite')\n    list_filter = ('name', 'author', 'tags')\n    search_fields = ('name',)\n    readonly_fields = ('favorite',)\n    fields = ('image',\n              ('name', 'author'),",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipeAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class RecipeAdmin(ModelAdmin):\n    list_display = ('name', 'author', 'pub_date', 'display_tags', 'favorite')\n    list_filter = ('name', 'author', 'tags')\n    search_fields = ('name',)\n    readonly_fields = ('favorite',)\n    fields = ('image',\n              ('name', 'author'),\n              'text',\n              ('tags', 'cooking_time'),\n              'favorite')",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipeIngredientAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class RecipeIngredientAdmin(ModelAdmin):\n    list_display = ('recipe', 'ingredient', 'amount')\n@register(Favorite)\nclass FavoriteAdmin(ModelAdmin):\n    list_display = ('recipe', 'user')\n@register(ShoppingCart)\nclass ShoppingCartAdmin(ModelAdmin):\n    list_display = ('recipe', 'user')",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "FavoriteAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class FavoriteAdmin(ModelAdmin):\n    list_display = ('recipe', 'user')\n@register(ShoppingCart)\nclass ShoppingCartAdmin(ModelAdmin):\n    list_display = ('recipe', 'user')",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "ShoppingCartAdmin",
        "kind": 6,
        "importPath": "backend.recipes.admin",
        "description": "backend.recipes.admin",
        "peekOfCode": "class ShoppingCartAdmin(ModelAdmin):\n    list_display = ('recipe', 'user')",
        "detail": "backend.recipes.admin",
        "documentation": {}
    },
    {
        "label": "RecipesConfig",
        "kind": 6,
        "importPath": "backend.recipes.apps",
        "description": "backend.recipes.apps",
        "peekOfCode": "class RecipesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'recipes'",
        "detail": "backend.recipes.apps",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Ingredient(models.Model):\n    name = models.CharField(\n        verbose_name='Название ингредиента',\n        max_length=100\n    )\n    measurement_unit = models.CharField(\n        verbose_name='Единица измерения',\n        max_length=15\n    )\n    class Meta:",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Tag(models.Model):\n    name = models.CharField(\n        verbose_name='Название',\n        max_length=16,\n        unique=True\n    )\n    color = models.CharField(\n        max_length=16,\n        verbose_name='Цвет'\n    )",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Recipe(models.Model):\n    ingredients = models.ManyToManyField(\n        Ingredient,\n        verbose_name='Ингредиенты',\n        through='RecipeIngredient',\n        related_name='recipe'\n    )\n    image = models.ImageField(\n        verbose_name='Изображение',\n        upload_to='recipes/'",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class RecipeIngredient(models.Model):\n    recipe = models.ForeignKey(\n        Recipe,\n        on_delete=models.CASCADE,\n        verbose_name='Рецепт',\n        related_name='recipe_ingredient'\n    )\n    ingredient = models.ForeignKey(\n        Ingredient,\n        on_delete=models.CASCADE,",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class Favorite(models.Model):\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        verbose_name='Пользователь',\n        related_name='favorite'\n    )\n    recipe = models.ForeignKey(\n        Recipe,\n        on_delete=models.CASCADE,",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "ShoppingCart",
        "kind": 6,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "class ShoppingCart(models.Model):\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        verbose_name='Пользователь',\n        related_name='shopping_cart'\n    )\n    recipe = models.ForeignKey(\n        Recipe,\n        on_delete=models.CASCADE,",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "backend.recipes.models",
        "description": "backend.recipes.models",
        "peekOfCode": "User = get_user_model()\nclass Ingredient(models.Model):\n    name = models.CharField(\n        verbose_name='Название ингредиента',\n        max_length=100\n    )\n    measurement_unit = models.CharField(\n        verbose_name='Единица измерения',\n        max_length=15\n    )",
        "detail": "backend.recipes.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.users.migrations.0001_initial",
        "description": "backend.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0011_update_proxy_permissions'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomUserAmin",
        "kind": 6,
        "importPath": "backend.users.admin",
        "description": "backend.users.admin",
        "peekOfCode": "class CustomUserAmin(UserAdmin):\n    list_display = ('username', 'email', 'first_name', 'last_name')\n    list_filter = ('username', 'email')\n@register(Follow)\nclass FollowAdmin(ModelAdmin):\n    list_display = ('user', 'author')",
        "detail": "backend.users.admin",
        "documentation": {}
    },
    {
        "label": "FollowAdmin",
        "kind": 6,
        "importPath": "backend.users.admin",
        "description": "backend.users.admin",
        "peekOfCode": "class FollowAdmin(ModelAdmin):\n    list_display = ('user', 'author')",
        "detail": "backend.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "backend.users.apps",
        "description": "backend.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "backend.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.users.models",
        "description": "backend.users.models",
        "peekOfCode": "class User(AbstractUser):\n    email = models.EmailField(\n        'Электронная почта',\n        unique=True,\n        max_length=254\n    )\n    username = models.CharField(\n        'Имя пользователя',\n        max_length=150,\n        unique=True,",
        "detail": "backend.users.models",
        "documentation": {}
    },
    {
        "label": "Follow",
        "kind": 6,
        "importPath": "backend.users.models",
        "description": "backend.users.models",
        "peekOfCode": "class Follow(models.Model):\n    user = models.ForeignKey(\n        User,\n        related_name='follower',\n        verbose_name='Подписчик',\n        on_delete=models.CASCADE\n    )\n    author = models.ForeignKey(\n        User,\n        related_name='following',",
        "detail": "backend.users.models",
        "documentation": {}
    },
    {
        "label": "validate_username",
        "kind": 2,
        "importPath": "backend.users.validators",
        "description": "backend.users.validators",
        "peekOfCode": "def validate_username(value):\n    if value.lower() == 'me':\n        raise ValidationError(\n            'Недопустимое имя пользователя!'\n        )\n    if not bool(re.match(r'^[\\w.@+-]+$', value)):\n        raise ValidationError(\n            'Некорректные символы в username'\n        )\n    return value",
        "detail": "backend.users.validators",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    }
]